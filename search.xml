<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[2019元旦]]></title>
    <url>%2F2019%2F01%2F19%2F2019%E5%85%83%E6%97%A6%2F</url>
    <content type="text"><![CDATA[2019元旦三天假期。假期的第一天也就是12月30号在家值了一天的班。晚上和舍友玩守望，聊起小聚的事情。起初没有确定好出去玩的地点，所以就先玩起了游戏，11点的时候我建议说去颐和园走走。之后我一个人玩游戏，玩着没有注意时间，一直玩到深夜两点 。第二天大概在9点多醒来，因为是周一，并且闹钟还是在开着的情况下，我睡的太沉而没有被闹醒。发消息给祯哥问他有没有空去颐和园走走，他兴许是忙其他的事情没有回消息。和张成浩约好了10半惠新西街南口汇合。匆匆洗漱完我就赶了过去。路上祯哥回消息说有空，去颐和园要三个小时才能到。和张成浩汇合后就先在海淀黄庄附近的购物中心走了走。大概2点多的时候祯哥过来了。我们去了颐和园附近的一家饭馆——武林峰。在美团颐和园周边美食推荐排行位列第一，听着名字比较霸气所以比较好奇。过去的时候发现馆子很是简朴，布局也很粗狂。大概是过了饭点的时间，店里的人很少。我们坐在靠窗户的一角坐下。要了份烤鱼和几个小菜就聊着了。下午的时候天气转阴，店里的暖气也不够暖和。即便如此，也抑制不住相聚时候激动的心情。吃完饭的时候已经是4点多，天气也阴暗下来了。因为过来的时间比较晚，我们就相约明天再去颐和园。第二天上午一起去了武林峰饭馆吃了早餐。进颐和园的时候已经快11点，天气很好，风和日丽，太阳照在身上很是暖和。进了园子里我提议去滑冰。滑冰的队伍排了很长，我和祯哥排着买票的队伍，张成浩去边上的souvenir店给我们每个人买了副手套。我们要了两个单人冰车和一辆冰上自行车。剪了票就进入了冰场。昆明湖开放的冰场很大，上面挤满人群。我们领了冰车和自行车就愉快地玩耍起来了～单人冰车很好玩，虽然我一直控制不好方向。冰上自行车不行，稍微使点力气轮胎就打滑。从性价比和可玩性上面讲还是推荐单人冰车比较实在。除了一个人玩之外还可以几个冰车合体，很有趣。唯一的缺点就是玩久了胳臂比较累。直到下午一点多我们走完了一圈颐和园就去外面吃饭。这次去了美团周边推荐榜上第二的一家饭馆——恒叶渔村。同样要了份烤鱼。相比于武林峰的烤鱼，这家烤鱼使用煮而不是煎的方式。所以鱼的味道也更加入味。因为祯哥回去要将近3个小时的路程。所以4点多的时候我们就各自告别，踏上回去的路途。希望我们每年都有一次这样的相聚，不用丰盛的饭菜和美酒，要的是在一起相聚时刻的开心。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一道关于多字段排序的问题]]></title>
    <url>%2F2019%2F01%2F14%2F%E4%B8%80%E9%81%93%E5%85%B3%E4%BA%8E%E5%A4%9A%E5%AD%97%E6%AE%B5%E6%8E%92%E5%BA%8F%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[有一张关于用户游戏积分的数据表，表的字段如下 scores(id,uid,score,dateTime)，字段解释如下：id 分数记录主键uid 用户idscore 分数dateTime 产生记录的时间 说明：用户每天每个用户会产生多条记录。Q1. 统计2018年4月份每天总分大于60，用户月活跃天数大于16的用户信息。Q2. 使用php实现一个函数，可以多条件排序的。参考mysql多条件排序功能。12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879&lt;?php/** * Created by PhpStorm. * User: zx * Date: 2018/4/26 * Time: 13:34 */$arr = array( ['uid'=&gt;3,'score'=&gt;'20','dateTime'=&gt;'2018-4-3'], ['uid'=&gt;1,'score'=&gt;'30','dateTime'=&gt;'2018-4-5'], ['uid'=&gt;3,'score'=&gt;'20','dateTime'=&gt;'2018-4-4'], ['uid'=&gt;2,'score'=&gt;'21','dateTime'=&gt;'2018-4-6'], ['uid'=&gt;5,'score'=&gt;'33','dateTime'=&gt;'2018-4-9'], ['uid'=&gt;6,'score'=&gt;'24','dateTime'=&gt;'2018-4-2'], ['uid'=&gt;7,'score'=&gt;'28','dateTime'=&gt;'2018-4-1'], ['uid'=&gt;6,'score'=&gt;'30','dateTime'=&gt;'2018-4-1'], ['uid'=&gt;6,'score'=&gt;'41','dateTime'=&gt;'2018-4-1'], ['uid'=&gt;1,'score'=&gt;'12','dateTime'=&gt;'2018-4-3'], ['uid'=&gt;1,'score'=&gt;'17','dateTime'=&gt;'2018-4-5'], ['uid'=&gt;2,'score'=&gt;'29','dateTime'=&gt;'2018-4-4'], ['uid'=&gt;3,'score'=&gt;'30','dateTime'=&gt;'2018-4-3'], ['uid'=&gt;4,'score'=&gt;'39','dateTime'=&gt;'2018-4-7'], ['uid'=&gt;6,'score'=&gt;'40','dateTime'=&gt;'2018-4-8'], ['uid'=&gt;8,'score'=&gt;'20','dateTime'=&gt;'2018-4-6'], ['uid'=&gt;7,'score'=&gt;'50','dateTime'=&gt;'2018-4-4'], ['uid'=&gt;8,'score'=&gt;'36','dateTime'=&gt;'2018-4-6'], ['uid'=&gt;2,'score'=&gt;'70','dateTime'=&gt;'2018-4-4'], ['uid'=&gt;4,'score'=&gt;'12','dateTime'=&gt;'2018-4-9'], ); function multiSort(array $arr, array $orders)&#123; foreach($orders as $orderField=&gt;$orderType)&#123; $tmp = array(); foreach($arr as $data)&#123; array_push($tmp,$data[$orderField]); &#125; $orderType = strtolower($orderType)=='desc'? SORT_DESC : SORT_ASC; $orderMethod = is_string($tmp[0])? SORT_STRING :SORT_NUMERIC; array_multisort($tmp,$orderType,$orderMethod,$arr); &#125; return $arr;&#125;$orders = ['uid'=&gt;'asc','score'=&gt;'desc'];$result = multiSort($arr,$orders);echo '&lt;pre&gt;';var_dump($result);echo '&lt;/pre&gt;';function umultiSort(array $arr, array $orders)&#123; usort($arr,function($a,$b)use($arr,$orders)&#123; foreach($orders as $orderField=&gt;$orderType)&#123; if(is_integer($a[$orderField]))&#123; if(strtolower($orderType)=='desc')&#123; if($a[$orderField]==$b[$orderField]) continue; return $a[$orderField]&lt;$b[$orderField]?1:-1; &#125;else&#123; if($a[$orderField]==$b[$orderField]) continue; return $a[$orderField]&gt;$b[$orderField]?1:-1; &#125; &#125;else&#123; if(strtolower($orderType)=='desc')&#123; if(strcmp($a[$orderField],$b[$orderField])==0) continue; return strcmp($b[$orderField],$a[$orderField]); &#125;else&#123; if(strcmp($a[$orderField],$b[$orderField])==0) continue; return strcmp($a[$orderField],$b[$orderField]); &#125; &#125; &#125; &#125;); return $arr;&#125;$orders = ['uid'=&gt;'asc','score'=&gt;'asc','dateTime'=&gt;'desc'];$result = umultiSort($arr,$orders);echo '&lt;hr/&gt;&lt;pre&gt;';var_dump($result);echo '&lt;/pre&gt;';mysql多条件排序时候，当第一个排序字段一致时会比较第二个字段进行排序以此类推。所以php实现的时候也需要遵守这种规则。上述php代码结果运行后发现使用array_multisort()实现的排序函数会出现后一个排序字段会覆盖前一个排序字段的规则（当然，其实可以避免这种情况，只要传入多个排序字段及规则。但是参数格式不好把握！）。而使用自定义排序规则函数usort()可以很好的避免这种情况。 关于array_multisort()和usort()性能及场景比较： arraycount=1000 usort排序执行时间为：0.034267902374268 s array_multisort排序执行时间为：0.0045900344848633 sarraycount=10000 usort排序执行时间为：0.29996109008789 s array_multisort排序执行时间为：0.03429102897644 sarratcount=100000 usort排序执行时间为：3.8284521102905 s array_multisort排序执行时间为：0.85004997253418 s 可以看出array_multisort的确要快很多，但对于数据量很小的排序usort可以做到更为灵活的业务处理。另外一点是使用usort比较同值排序时会出现排序随机的状态，做榜单类数据并不合适。]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一个留言弹幕demo]]></title>
    <url>%2F2019%2F01%2F14%2F%E4%B8%80%E4%B8%AA%E7%95%99%E8%A8%80%E5%BC%B9%E5%B9%95demo%2F</url>
    <content type="text"><![CDATA[最近项目上有用到swoole搭建的websocket去实现一些功能。趁着周末写了个弹幕，原理是一样的。首先需要开启php的redis扩展及swoole扩展。注意：需要在cli下开启这两个扩展。因为服务端脚本执行在php的cli模式下。 查看开启扩展 : php -m下面就是服务端代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485&lt;?php/** * author 4ward * Class myswoole */class myswoole&#123; private $ws; //websocket连接句柄 private $red; //redis连接句柄 public function __construct() &#123; $this-&gt;myredis(); // 连接redis $this-&gt;mywebsocket(); // 开启websocket服务 &#125; //websocket 服务端 public function mywebsocket()&#123; //创建websocket服务器对象，监听0.0.0.0:9502端口 $this-&gt;ws = new swoole_websocket_server("0.0.0.0", 9502); //初始化swoole服务 $this-&gt;ws-&gt;set(array( 'daemonize' =&gt; 0, //是否作为守护进程,此配置一般配合log_file使用 'max_request' =&gt; 1000, 'dispatch_mode' =&gt; 2, 'debug_mode' =&gt; 1, 'log_file' =&gt; 'swoole.log', // 心跳检测的设置，自动踢掉掉线的fd 'heartbeat_idle_time' =&gt; 600, 'heartbeat_check_interval' =&gt; 60, )); //监听WebSocket连接开启事件 $this-&gt;ws-&gt;on('WorkerStart', function($ws , $worker_id)&#123; // 在Worker进程开启时绑定定时器 echo "【date：".date("Y-m-d H:i:s",time())."】".$worker_id ." onWorkerStart... \n"; &#125;); //监听连接打开时间 $this-&gt;ws-&gt;on('open', function($ws, $request)&#123; echo "【date：".date("Y-m-d H:i:s",time())."】client ".$request-&gt;fd." has established...\n"; $msg = $this-&gt;red-&gt;lrange(date("Y-m-d",time()),0,-1); foreach ($msg as $data)&#123; $this-&gt;ws-&gt;push($request-&gt;fd,json_encode((object)$data)); usleep(500000); &#125; &#125;); //监听WebSocket消息事件 $this-&gt;ws-&gt;on('message', function($ws, $frame)&#123; echo "【data：".date("Y-m-d H:i:s",time())."】 Message: &#123;$frame-&gt;data&#125; \n"; $this-&gt;red-&gt;lpush(date("Y-m-d",time()),$frame-&gt;data); foreach($this-&gt;ws-&gt;connections as $id)&#123; $this-&gt;ws-&gt;push($id, json_encode((object)$frame-&gt;data)); &#125; &#125;); //监听WebSocket连接关闭事件 $this-&gt;ws-&gt;on('close', function($ws, $fd)&#123; echo "【date：".date("Y-m-d H:i:s",time())."】client ".$fd." has established...\n"; &#125;); //开启服务 $this-&gt;ws-&gt;start(); &#125; //启动redis服务 public function myredis()&#123; $this-&gt;red = new Redis(); $this-&gt;red-&gt;connect('127.0.0.1','6379'); $this-&gt;red-&gt;select(5); echo "【date：".date("Y-m-d H:i:s",time())."】redis service has started...\n"; &#125;&#125;$myswoole = new myswoole;在cli下执行脚本及可：php server.php一个小问题：这是浏览器客户端代码。//初始化ws var wsServer = "ws://127.0.0.1:9502"; websocket = new WebSocket(wsServer); websocket.onopen = function(evt)&#123; console.log(websocket.readyState+' websocket service established...'); &#125; //监听返回结果 websocket.onmessage = function (evt)&#123; var data = JSON.parse(evt.data); console.log(data); for(var i in data)&#123; barrageWall.upWall("images/aq.png","我是说话人",data[i]);//初始化弹幕墙 &#125; &#125;总体功能上我是这样想的，当用户点开页面，建立会话连接，此时将之前的（一天内）弹幕信息全部取出来，广播给用户。 但是结合前端页面实际效果是，所有弹幕会在一个垂直的竖排显示。 我尝试着在循环时候加上类似于php的sleep(N)函数功能的代码。最后的效果是等待N次循环秒数之和后，全部在弹幕上以垂直竖排的方式输出。 无奈之下，只好在后端每次只发一条数据信息，并且设置合理的时间间隔，前端才会有想要的效果。 熬夜伤身体，所以我更倾向于通宵。开个玩笑！很晚了，我得睡了= = 这个问题留着，改日再究！所有的demo文件已经上传到我的github上，需要的可以参考下载。弹幕demo]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>swoole</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hello world]]></title>
    <url>%2F2019%2F01%2F14%2Ffirst%2F</url>
    <content type="text"><![CDATA[Hello World!12&lt;?phpecho 'Hello World!';]]></content>
      <categories>
        <category>php</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>helloWorld</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[写给2017]]></title>
    <url>%2F2018%2F01%2F09%2F%E5%86%99%E7%BB%992017%2F</url>
    <content type="text"><![CDATA[过去的一年是个百感交集的一年。毕业的欣喜，离别的惆怅，求职以及工作的艰辛。都在这不短不长，不声不响的一年中发生着。充实的日子这一年最充实的大概是写毕设的那段时光了，找素材、写页面、写功能，经常熬夜到很晚。毕业之前就扯犊子嚷嚷着要做C站（AB站相仿）,虽说是玩笑话，我去尽全力用代码去实现了。成品虽然拙陋，但是每每拿出来自己欣赏，还是觉得是件值得骄傲的事情。毕设答辩虽然只拿到中（没有申请校答辩，自己也不擅表达），但还是觉得很满足。多年后，也许我会指着自己的毕设说，看！我实现了我所说的话，我做到了，没有什么遗憾的了。破碎的友谊也许回不到曾经的那段时光，纯粹的友谊，你我他的日子。 不，确切的说是回不到了，没有也许。时间也许会治愈创伤，却再也稀释不掉那些记忆了，破碎的，令人心痛着的。 就让你的任性，你爽朗的笑声消失在我的生命里吧，这对彼此都好，不是吗？ 露寒霜重，望君珍重。欢聚和离别嫌弃涮吧太挤、宿舍太差。而如今却又开始怀念起了。 回校的5天里，时间显得如此的飞快。忙碌于整理论文，找导师，修改论文。我们甚至再也没有时间把食堂挨个吃一遍，再也没有机会去小操场散步，压腿，跑几圈。再也不能够在某个周末的晚上去校外的美食街去扫荡美食了。而一切的一切却又仿佛如昨。 拍毕业照大概是最感动的时间吧，80多个人接近半年时间没有相见，匆匆的从全国各地各个岗位角落，来完成这一历史性定格的瞬间。那种感觉说不出来，遥远而陌生，熟悉而又不舍。相信表面平静欢愉，心里实则已经波涛汹涌了吧。 离别的时候在包头站拍下夜景，很美。就像四年前我刚踏入包头那片炙土那样，就像四年前我所第一次见到的伸手可触的蓝天，和美到令人心碎的晚霞。仿佛我又回到四年前，骑着单车初来乍到。带着对这座城市的陌生惊喜，行驶在阿尔丁大街。稀疏的车辆人流，晚风吹散着盛夏的余热，一切都很好。 在我离别时，这座陪伴四年的城市，就像多年的老友目送着远去的我，深情而又慈祥。遗憾12月16号，充满遗憾的一天。 原本打算趁着周末时间去参加PHP开发者年会，却因为加班而成为了泡影。 对于加班，没什么个人私事，只要是公司需要，我会无条件的服从，这是对工作的态度。但仍然觉得是个遗憾。 虽然初入职业生涯不久，也不是什么技术大牛，但却一直对技术充满着热情，也很崇拜业界大牛，他们对于PHP发展所做的贡献。而且技术交流可以让我开拓眼界，明确自己坐标和发展的方向，这对于个人发展和成长都是大有裨益的。 早上8点，前往公司方向的公交上，收到老爸和老妈的红包，520，生日快乐！才意识到，这也是我步入社会第一个身在他乡将要一个人度过的生日。一阵阵暖流从内心涌向了后背，直至遍布到了全身，很感动。 记得那天加班到很晚，回去后还是忍不住发了一条说说：恩，美好的一天，生日快乐！。狼狈不知道狼狈的定义是什么，不过如果我要是被房东赶出来，行李都没来得及收拾，房子更没来得及找，这算不算是件很狼狈的事了！ 北京公寓整改，违规的公寓都进行了拆除整治。原本房子也快到期，打算趁着周六找房，周日搬出去，不想周六加了一天的班。离开公司已经是凌晨。 仍记得从公司出来的路上我是多么的狼狈，因为房子停水停电停暖，加之项目上线每日加班，所以那段日子可以说是得过且过。 从公司离开并没有直接回去，因为我知道等待我的是漆黑寒冷的夜，没有水及暖气。我不得不去找房子，搬家。至少先出去找个旅馆安顿下自己，明天找房。从北门走向鲁疃小区北，一路上凛冽的寒风，吹过我凌乱的头发以及疲倦的脸，当我走到十字路口，一阵突如其来的无助狼狈感涌上心头，那一刻我甚至不知道我该去哪儿，不知道接下来该做什么。哼着sam smith的drowning shadows 徘徊在暗淡灯光下的十字路口。发呆了很久，还是选择了回去，毕竟很晚了。偌大的路，昏暗的灯光，睡去的长夜，耳畔只剩下风声，脚步声，以及我细微的呼吸声。 周日一大早被房东吵醒，嚷嚷着让我搬出去。 从路边雇了辆搬家的小型货车，联系了在京的同学，就匆匆上了路。路上司机和我说，你们公寓，明天就要拆了。 我就那样狼狈的度过了一周。久别后的小聚2.10下午4点，从天通苑北乘地铁，近两个小时的路程去南站送别大学舍友。 不到两个小时的路程，坐过了一站公交，然而心里还是很激动，毕业后已经半年的时间没有见面了。 祯哥、舍长和我在车站旁李先生加州面馆点了面。平时话不是很多，见到他们，感觉话匣子就打开了。聊了很多关于生活、工作上的事情。 大学期间宿舍就建立了很深的友情，做什么事情，都是一个宿舍全体行动。毕业后我们都辗转奉献于全国不同的工作岗位。能聚到一起是很令人激动的事情了。送别完舍长已经近晚上10点。和祯哥回去的路上，因为聊得投入，也没少走错路。新的一年都要好好的，425兄弟们，加油！新年伊始新年的脚步在炮竹声中来临了。2018，满载着期待、希望和成长的一年。希望不负时光，沉淀自己、超越自己！一切安好。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
</search>
